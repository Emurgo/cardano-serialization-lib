/**
 * Flowtype definitions for cardano_serialization_lib
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 * @flow
 */

/**
 * @param {TransactionHash} tx_body_hash
 * @param {ByronAddress} addr
 * @param {LegacyDaedalusPrivateKey} key
 * @returns {BootstrapWitness}
 */
declare export function make_daedalus_bootstrap_witness(
  tx_body_hash: TransactionHash,
  addr: ByronAddress,
  key: LegacyDaedalusPrivateKey
): BootstrapWitness;

/**
 * @param {TransactionHash} tx_body_hash
 * @param {ByronAddress} addr
 * @param {Bip32PrivateKey} key
 * @returns {BootstrapWitness}
 */
declare export function make_icarus_bootstrap_witness(
  tx_body_hash: TransactionHash,
  addr: ByronAddress,
  key: Bip32PrivateKey
): BootstrapWitness;

/**
 * @param {TransactionHash} tx_body_hash
 * @param {PrivateKey} sk
 * @returns {Vkeywitness}
 */
declare export function make_vkey_witness(
  tx_body_hash: TransactionHash,
  sk: PrivateKey
): Vkeywitness;

/**
 * @param {TransactionMetadata} metadata
 * @returns {MetadataHash}
 */
declare export function hash_metadata(
  metadata: TransactionMetadata
): MetadataHash;

/**
 * @param {TransactionBody} tx_body
 * @returns {TransactionHash}
 */
declare export function hash_transaction(
  tx_body: TransactionBody
): TransactionHash;

/**
 * @param {Transaction} tx
 * @param {LinearFee} linear_fee
 * @returns {BigNum}
 */
declare export function min_fee(tx: Transaction, linear_fee: LinearFee): BigNum;

/**
 */

declare export var CertificateKind: {|
  +StakeRegistration: 0, // 0
  +StakeDeregistration: 1, // 1
  +StakeDelegation: 2, // 2
  +PoolRegistration: 3, // 3
  +PoolRetirement: 4, // 4
  +GenesisKeyDelegation: 5, // 5
  +MoveInstantaneousRewardsCert: 6, // 6
|};

/**
 */

declare export var MIRPot: {|
  +Reserves: 0, // 0
  +Treasury: 1, // 1
|};

/**
 */

declare export var RelayKind: {|
  +SingleHostAddr: 0, // 0
  +SingleHostName: 1, // 1
  +MultiHostName: 2, // 2
|};

/**
 */

declare export var TransactionMetadatumKind: {|
  +MapTransactionMetadatumToTransactionMetadatum: 0, // 0
  +ArrTransactionMetadatum: 1, // 1
  +Int: 2, // 2
  +Bytes: 3, // 3
  +Text: 4, // 4
|};

/**
 */

declare export var MultisigScriptKind: {|
  +MsigPubkey: 0, // 0
  +MsigAll: 1, // 1
  +MsigAny: 2, // 2
  +MsigNOfK: 3, // 3
|};

/**
 */
declare export class Address {
  free(): void;

  /**
   * @param {Uint8Array} data
   * @returns {Address}
   */
  static from_bytes(data: Uint8Array): Address;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @returns {string}
   */
  to_bech32(): string;

  /**
   * @param {string} bech_str
   * @returns {Address}
   */
  static from_bech32(bech_str: string): Address;

  /**
   * @returns {number}
   */
  network_id(): number;
}
/**
 */
declare export class BaseAddress {
  free(): void;

  /**
   * @param {number} network
   * @param {StakeCredential} payment
   * @param {StakeCredential} stake
   * @returns {BaseAddress}
   */
  static new(
    network: number,
    payment: StakeCredential,
    stake: StakeCredential
  ): BaseAddress;

  /**
   * @returns {StakeCredential}
   */
  payment_cred(): StakeCredential;

  /**
   * @returns {StakeCredential}
   */
  stake_cred(): StakeCredential;

  /**
   * @returns {Address}
   */
  to_address(): Address;

  /**
   * @param {Address} addr
   * @returns {BaseAddress | void}
   */
  static from_address(addr: Address): BaseAddress | void;
}
/**
 */
declare export class BigNum {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {BigNum}
   */
  static from_bytes(bytes: Uint8Array): BigNum;

  /**
   * @param {BigInt} value
   * @returns {BigNum}
   */
  static new(value: BigInt): BigNum;

  /**
   * @returns {BigInt}
   */
  unwrap(): BigInt;

  /**
   * @param {string} string
   * @returns {BigNum}
   */
  static from_str(string: string): BigNum;

  /**
   * @returns {string}
   */
  to_str(): string;

  /**
   * @param {BigNum} other
   * @returns {BigNum}
   */
  checked_mul(other: BigNum): BigNum;

  /**
   * @param {BigNum} other
   * @returns {BigNum}
   */
  checked_add(other: BigNum): BigNum;

  /**
   * @param {BigNum} other
   * @returns {BigNum}
   */
  checked_sub(other: BigNum): BigNum;
}
/**
 */
declare export class Bip32PrivateKey {
  free(): void;

  /**
   * derive this private key with the given index.
   *
   * # Security considerations
   *
   * * hard derivation index cannot be soft derived with the public key
   *
   * # Hard derivation vs Soft derivation
   *
   * If you pass an index below 0x80000000 then it is a soft derivation.
   * The advantage of soft derivation is that it is possible to derive the
   * public key too. I.e. derivation the private key with a soft derivation
   * index and then retrieving the associated public key is equivalent to
   * deriving the public key associated to the parent private key.
   *
   * Hard derivation index does not allow public key derivation.
   *
   * This is why deriving the private key should not fail while deriving
   * the public key may fail (if the derivation index is invalid).
   * @param {number} index
   * @returns {Bip32PrivateKey}
   */
  derive(index: number): Bip32PrivateKey;

  /**
   * @returns {Bip32PrivateKey}
   */
  static generate_ed25519_bip32(): Bip32PrivateKey;

  /**
   * @returns {PrivateKey}
   */
  to_raw_key(): PrivateKey;

  /**
   * @returns {Bip32PublicKey}
   */
  to_public(): Bip32PublicKey;

  /**
   * @param {Uint8Array} bytes
   * @returns {Bip32PrivateKey}
   */
  static from_bytes(bytes: Uint8Array): Bip32PrivateKey;

  /**
   * @returns {Uint8Array}
   */
  as_bytes(): Uint8Array;

  /**
   * @param {string} bech32_str
   * @returns {Bip32PrivateKey}
   */
  static from_bech32(bech32_str: string): Bip32PrivateKey;

  /**
   * @returns {string}
   */
  to_bech32(): string;

  /**
   * @param {Uint8Array} entropy
   * @param {Uint8Array} password
   * @returns {Bip32PrivateKey}
   */
  static from_bip39_entropy(
    entropy: Uint8Array,
    password: Uint8Array
  ): Bip32PrivateKey;

  /**
   * @returns {Uint8Array}
   */
  chaincode(): Uint8Array;
}
/**
 */
declare export class Bip32PublicKey {
  free(): void;

  /**
   * derive this public key with the given index.
   *
   * # Errors
   *
   * If the index is not a soft derivation index (< 0x80000000) then
   * calling this method will fail.
   *
   * # Security considerations
   *
   * * hard derivation index cannot be soft derived with the public key
   *
   * # Hard derivation vs Soft derivation
   *
   * If you pass an index below 0x80000000 then it is a soft derivation.
   * The advantage of soft derivation is that it is possible to derive the
   * public key too. I.e. derivation the private key with a soft derivation
   * index and then retrieving the associated public key is equivalent to
   * deriving the public key associated to the parent private key.
   *
   * Hard derivation index does not allow public key derivation.
   *
   * This is why deriving the private key should not fail while deriving
   * the public key may fail (if the derivation index is invalid).
   * @param {number} index
   * @returns {Bip32PublicKey}
   */
  derive(index: number): Bip32PublicKey;

  /**
   * @returns {PublicKey}
   */
  to_raw_key(): PublicKey;

  /**
   * @param {Uint8Array} bytes
   * @returns {Bip32PublicKey}
   */
  static from_bytes(bytes: Uint8Array): Bip32PublicKey;

  /**
   * @returns {Uint8Array}
   */
  as_bytes(): Uint8Array;

  /**
   * @param {string} bech32_str
   * @returns {Bip32PublicKey}
   */
  static from_bech32(bech32_str: string): Bip32PublicKey;

  /**
   * @returns {string}
   */
  to_bech32(): string;

  /**
   * @returns {Uint8Array}
   */
  chaincode(): Uint8Array;
}
/**
 */
declare export class BootstrapWitness {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {BootstrapWitness}
   */
  static from_bytes(bytes: Uint8Array): BootstrapWitness;

  /**
   * @returns {Vkey}
   */
  vkey(): Vkey;

  /**
   * @returns {Ed25519Signature}
   */
  signature(): Ed25519Signature;

  /**
   * @returns {Uint8Array}
   */
  chain_code(): Uint8Array;

  /**
   * @returns {Uint8Array}
   */
  attributes(): Uint8Array;

  /**
   * @param {Vkey} vkey
   * @param {Ed25519Signature} signature
   * @param {Uint8Array} chain_code
   * @param {Uint8Array} attributes
   * @returns {BootstrapWitness}
   */
  static new(
    vkey: Vkey,
    signature: Ed25519Signature,
    chain_code: Uint8Array,
    attributes: Uint8Array
  ): BootstrapWitness;
}
/**
 */
declare export class BootstrapWitnesses {
  free(): void;

  /**
   * @returns {BootstrapWitnesses}
   */
  static new(): BootstrapWitnesses;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {BootstrapWitness}
   */
  get(index: number): BootstrapWitness;

  /**
   * @param {BootstrapWitness} elem
   */
  add(elem: BootstrapWitness): void;
}
/**
 */
declare export class ByronAddress {
  free(): void;

  /**
   * @returns {string}
   */
  to_base58(): string;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {ByronAddress}
   */
  static from_bytes(bytes: Uint8Array): ByronAddress;

  /**
   * @returns {number}
   */
  network_id(): number;

  /**
   * @param {string} s
   * @returns {ByronAddress}
   */
  static from_base58(s: string): ByronAddress;

  /**
   * @param {Bip32PublicKey} key
   * @param {number} network
   * @returns {ByronAddress}
   */
  static from_icarus_key(key: Bip32PublicKey, network: number): ByronAddress;

  /**
   * @param {string} s
   * @returns {boolean}
   */
  static is_valid(s: string): boolean;

  /**
   * @returns {Address}
   */
  to_address(): Address;

  /**
   * @param {Address} addr
   * @returns {ByronAddress | void}
   */
  static from_address(addr: Address): ByronAddress | void;
}
/**
 */
declare export class Certificate {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Certificate}
   */
  static from_bytes(bytes: Uint8Array): Certificate;

  /**
   * @param {StakeRegistration} stake_registration
   * @returns {Certificate}
   */
  static new_stake_registration(
    stake_registration: StakeRegistration
  ): Certificate;

  /**
   * @param {StakeDeregistration} stake_deregistration
   * @returns {Certificate}
   */
  static new_stake_deregistration(
    stake_deregistration: StakeDeregistration
  ): Certificate;

  /**
   * @param {StakeDelegation} stake_delegation
   * @returns {Certificate}
   */
  static new_stake_delegation(stake_delegation: StakeDelegation): Certificate;

  /**
   * @param {PoolRegistration} pool_registration
   * @returns {Certificate}
   */
  static new_pool_registration(
    pool_registration: PoolRegistration
  ): Certificate;

  /**
   * @param {PoolRetirement} pool_retirement
   * @returns {Certificate}
   */
  static new_pool_retirement(pool_retirement: PoolRetirement): Certificate;

  /**
   * @param {GenesisKeyDelegation} genesis_key_delegation
   * @returns {Certificate}
   */
  static new_genesis_key_delegation(
    genesis_key_delegation: GenesisKeyDelegation
  ): Certificate;

  /**
   * @param {MoveInstantaneousRewardsCert} move_instantaneous_rewards_cert
   * @returns {Certificate}
   */
  static new_move_instantaneous_rewards_cert(
    move_instantaneous_rewards_cert: MoveInstantaneousRewardsCert
  ): Certificate;

  /**
   * @returns {number}
   */
  kind(): number;

  /**
   * @returns {StakeRegistration | void}
   */
  as_stake_registration(): StakeRegistration | void;

  /**
   * @returns {StakeDeregistration | void}
   */
  as_stake_deregistration(): StakeDeregistration | void;

  /**
   * @returns {StakeDelegation | void}
   */
  as_stake_delegation(): StakeDelegation | void;

  /**
   * @returns {PoolRegistration | void}
   */
  as_pool_registration(): PoolRegistration | void;

  /**
   * @returns {PoolRetirement | void}
   */
  as_pool_retirement(): PoolRetirement | void;

  /**
   * @returns {GenesisKeyDelegation | void}
   */
  as_genesis_key_delegation(): GenesisKeyDelegation | void;

  /**
   * @returns {MoveInstantaneousRewardsCert | void}
   */
  as_move_instantaneous_rewards_cert(): MoveInstantaneousRewardsCert | void;
}
/**
 */
declare export class Certificates {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Certificates}
   */
  static from_bytes(bytes: Uint8Array): Certificates;

  /**
   * @returns {Certificates}
   */
  static new(): Certificates;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {Certificate}
   */
  get(index: number): Certificate;

  /**
   * @param {Certificate} elem
   */
  add(elem: Certificate): void;
}
/**
 */
declare export class Ed25519KeyHash {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Ed25519KeyHash}
   */
  static from_bytes(bytes: Uint8Array): Ed25519KeyHash;
}
/**
 */
declare export class Ed25519KeyHashes {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Ed25519KeyHashes}
   */
  static from_bytes(bytes: Uint8Array): Ed25519KeyHashes;

  /**
   * @returns {Ed25519KeyHashes}
   */
  static new(): Ed25519KeyHashes;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {Ed25519KeyHash}
   */
  get(index: number): Ed25519KeyHash;

  /**
   * @param {Ed25519KeyHash} elem
   */
  add(elem: Ed25519KeyHash): void;
}
/**
 */
declare export class Ed25519Signature {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @returns {string}
   */
  to_bech32(): string;

  /**
   * @returns {string}
   */
  to_hex(): string;

  /**
   * @param {string} bech32_str
   * @returns {Ed25519Signature}
   */
  static from_bech32(bech32_str: string): Ed25519Signature;

  /**
   * @param {string} input
   * @returns {Ed25519Signature}
   */
  static from_hex(input: string): Ed25519Signature;

  /**
   * @param {Uint8Array} bytes
   * @returns {Ed25519Signature}
   */
  static from_bytes(bytes: Uint8Array): Ed25519Signature;
}
/**
 */
declare export class EnterpriseAddress {
  free(): void;

  /**
   * @param {number} network
   * @param {StakeCredential} payment
   * @returns {EnterpriseAddress}
   */
  static new(network: number, payment: StakeCredential): EnterpriseAddress;

  /**
   * @returns {StakeCredential}
   */
  payment_cred(): StakeCredential;

  /**
   * @returns {Address}
   */
  to_address(): Address;

  /**
   * @param {Address} addr
   * @returns {EnterpriseAddress | void}
   */
  static from_address(addr: Address): EnterpriseAddress | void;
}
/**
 */
declare export class GenesisDelegateHash {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {GenesisDelegateHash}
   */
  static from_bytes(bytes: Uint8Array): GenesisDelegateHash;
}
/**
 */
declare export class GenesisHash {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {GenesisHash}
   */
  static from_bytes(bytes: Uint8Array): GenesisHash;
}
/**
 */
declare export class GenesisKeyDelegation {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {GenesisKeyDelegation}
   */
  static from_bytes(bytes: Uint8Array): GenesisKeyDelegation;

  /**
   * @returns {GenesisHash}
   */
  genesishash(): GenesisHash;

  /**
   * @returns {GenesisDelegateHash}
   */
  genesis_delegate_hash(): GenesisDelegateHash;

  /**
   * @param {GenesisHash} genesishash
   * @param {GenesisDelegateHash} genesis_delegate_hash
   * @returns {GenesisKeyDelegation}
   */
  static new(
    genesishash: GenesisHash,
    genesis_delegate_hash: GenesisDelegateHash
  ): GenesisKeyDelegation;
}
/**
 */
declare export class Int {
  free(): void;

  /**
   * @param {BigNum} x
   * @returns {Int}
   */
  static new(x: BigNum): Int;

  /**
   * @param {BigNum} x
   * @returns {Int}
   */
  static new_negative(x: BigNum): Int;
}
/**
 */
declare export class Ipv4 {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Ipv4}
   */
  static from_bytes(bytes: Uint8Array): Ipv4;

  /**
   * @param {Uint8Array} data
   * @returns {Ipv4}
   */
  static new(data: Uint8Array): Ipv4;
}
/**
 */
declare export class Ipv6 {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Ipv6}
   */
  static from_bytes(bytes: Uint8Array): Ipv6;

  /**
   * @param {Uint8Array} data
   * @returns {Ipv6}
   */
  static new(data: Uint8Array): Ipv6;
}
/**
 */
declare export class LegacyDaedalusPrivateKey {
  free(): void;

  /**
   * @param {Uint8Array} bytes
   * @returns {LegacyDaedalusPrivateKey}
   */
  static from_bytes(bytes: Uint8Array): LegacyDaedalusPrivateKey;

  /**
   * @returns {Uint8Array}
   */
  as_bytes(): Uint8Array;

  /**
   * @returns {Uint8Array}
   */
  chaincode(): Uint8Array;
}
/**
 */
declare export class LinearFee {
  free(): void;

  /**
   * @returns {BigNum}
   */
  constant(): BigNum;

  /**
   * @returns {BigNum}
   */
  coefficient(): BigNum;

  /**
   * @param {BigNum} coefficient
   * @param {BigNum} constant
   * @returns {LinearFee}
   */
  static new(coefficient: BigNum, constant: BigNum): LinearFee;
}
/**
 */
declare export class MapTransactionMetadatumToTransactionMetadatum {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {MapTransactionMetadatumToTransactionMetadatum}
   */
  static from_bytes(
    bytes: Uint8Array
  ): MapTransactionMetadatumToTransactionMetadatum;

  /**
   * @returns {MapTransactionMetadatumToTransactionMetadatum}
   */
  static new(): MapTransactionMetadatumToTransactionMetadatum;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {TransactionMetadatum} key
   * @param {TransactionMetadatum} value
   * @returns {TransactionMetadatum | void}
   */
  insert(
    key: TransactionMetadatum,
    value: TransactionMetadatum
  ): TransactionMetadatum | void;

  /**
   * @param {TransactionMetadatum} key
   * @returns {TransactionMetadatum | void}
   */
  get(key: TransactionMetadatum): TransactionMetadatum | void;
}
/**
 */
declare export class MetadataHash {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {MetadataHash}
   */
  static from_bytes(bytes: Uint8Array): MetadataHash;
}
/**
 */
declare export class MoveInstantaneousReward {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {MoveInstantaneousReward}
   */
  static from_bytes(bytes: Uint8Array): MoveInstantaneousReward;

  /**
   * @param {number} pot
   * @returns {MoveInstantaneousReward}
   */
  static new(pot: number): MoveInstantaneousReward;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {StakeCredential} key
   * @param {BigNum} value
   * @returns {BigNum | void}
   */
  insert(key: StakeCredential, value: BigNum): BigNum | void;
}
/**
 */
declare export class MoveInstantaneousRewardsCert {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {MoveInstantaneousRewardsCert}
   */
  static from_bytes(bytes: Uint8Array): MoveInstantaneousRewardsCert;

  /**
   * @returns {MoveInstantaneousReward}
   */
  move_instantaneous_reward(): MoveInstantaneousReward;

  /**
   * @param {MoveInstantaneousReward} move_instantaneous_reward
   * @returns {MoveInstantaneousRewardsCert}
   */
  static new(
    move_instantaneous_reward: MoveInstantaneousReward
  ): MoveInstantaneousRewardsCert;
}
/**
 */
declare export class MsigAll {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {MsigAll}
   */
  static from_bytes(bytes: Uint8Array): MsigAll;

  /**
   * @returns {MultisigScripts}
   */
  multisig_scripts(): MultisigScripts;

  /**
   * @param {MultisigScripts} multisig_scripts
   * @returns {MsigAll}
   */
  static new(multisig_scripts: MultisigScripts): MsigAll;
}
/**
 */
declare export class MsigAny {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {MsigAny}
   */
  static from_bytes(bytes: Uint8Array): MsigAny;

  /**
   * @returns {MultisigScripts}
   */
  multisig_scripts(): MultisigScripts;

  /**
   * @param {MultisigScripts} multisig_scripts
   * @returns {MsigAny}
   */
  static new(multisig_scripts: MultisigScripts): MsigAny;
}
/**
 */
declare export class MsigNOfK {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {MsigNOfK}
   */
  static from_bytes(bytes: Uint8Array): MsigNOfK;

  /**
   * @returns {number}
   */
  n(): number;

  /**
   * @returns {MultisigScripts}
   */
  multisig_scripts(): MultisigScripts;

  /**
   * @param {number} n
   * @param {MultisigScripts} multisig_scripts
   * @returns {MsigNOfK}
   */
  static new(n: number, multisig_scripts: MultisigScripts): MsigNOfK;
}
/**
 */
declare export class MsigPubkey {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {MsigPubkey}
   */
  static from_bytes(bytes: Uint8Array): MsigPubkey;

  /**
   * @returns {Ed25519KeyHash}
   */
  addr_keyhash(): Ed25519KeyHash;

  /**
   * @param {Ed25519KeyHash} addr_keyhash
   * @returns {MsigPubkey}
   */
  static new(addr_keyhash: Ed25519KeyHash): MsigPubkey;
}
/**
 */
declare export class MultiHostName {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {MultiHostName}
   */
  static from_bytes(bytes: Uint8Array): MultiHostName;

  /**
   * @returns {string}
   */
  dns_name(): string;

  /**
   * @param {string} dns_name
   * @returns {MultiHostName}
   */
  static new(dns_name: string): MultiHostName;
}
/**
 */
declare export class MultisigScript {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {MultisigScript}
   */
  static from_bytes(bytes: Uint8Array): MultisigScript;

  /**
   * @param {Ed25519KeyHash} addr_keyhash
   * @returns {MultisigScript}
   */
  static new_msig_pubkey(addr_keyhash: Ed25519KeyHash): MultisigScript;

  /**
   * @param {MultisigScripts} multisig_scripts
   * @returns {MultisigScript}
   */
  static new_msig_all(multisig_scripts: MultisigScripts): MultisigScript;

  /**
   * @param {MultisigScripts} multisig_scripts
   * @returns {MultisigScript}
   */
  static new_msig_any(multisig_scripts: MultisigScripts): MultisigScript;

  /**
   * @param {number} n
   * @param {MultisigScripts} multisig_scripts
   * @returns {MultisigScript}
   */
  static new_msig_n_of_k(
    n: number,
    multisig_scripts: MultisigScripts
  ): MultisigScript;

  /**
   * @returns {number}
   */
  kind(): number;

  /**
   * @returns {MsigPubkey | void}
   */
  as_multisig_script0(): MsigPubkey | void;

  /**
   * @returns {MsigAll | void}
   */
  as_multisig_script1(): MsigAll | void;

  /**
   * @returns {MsigAny | void}
   */
  as_multisig_script2(): MsigAny | void;

  /**
   * @returns {MsigNOfK | void}
   */
  as_multisig_script3(): MsigNOfK | void;
}
/**
 */
declare export class MultisigScripts {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {MultisigScripts}
   */
  static from_bytes(bytes: Uint8Array): MultisigScripts;

  /**
   * @returns {MultisigScripts}
   */
  static new(): MultisigScripts;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {MultisigScript}
   */
  get(index: number): MultisigScript;

  /**
   * @param {MultisigScript} elem
   */
  add(elem: MultisigScript): void;
}
/**
 */
declare export class Pointer {
  free(): void;

  /**
   * @param {number} slot
   * @param {number} tx_index
   * @param {number} cert_index
   * @returns {Pointer}
   */
  static new(slot: number, tx_index: number, cert_index: number): Pointer;
}
/**
 */
declare export class PointerAddress {
  free(): void;

  /**
   * @param {number} network
   * @param {StakeCredential} payment
   * @param {Pointer} stake
   * @returns {PointerAddress}
   */
  static new(
    network: number,
    payment: StakeCredential,
    stake: Pointer
  ): PointerAddress;

  /**
   * @returns {StakeCredential}
   */
  payment_cred(): StakeCredential;

  /**
   * @returns {Pointer}
   */
  stake_ponter(): Pointer;

  /**
   * @returns {Address}
   */
  to_address(): Address;

  /**
   * @param {Address} addr
   * @returns {PointerAddress | void}
   */
  static from_address(addr: Address): PointerAddress | void;
}
/**
 */
declare export class PoolMetadata {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {PoolMetadata}
   */
  static from_bytes(bytes: Uint8Array): PoolMetadata;

  /**
   * @returns {string}
   */
  url(): string;

  /**
   * @returns {MetadataHash}
   */
  metadata_hash(): MetadataHash;

  /**
   * @param {string} url
   * @param {MetadataHash} metadata_hash
   * @returns {PoolMetadata}
   */
  static new(url: string, metadata_hash: MetadataHash): PoolMetadata;
}
/**
 */
declare export class PoolParams {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {PoolParams}
   */
  static from_bytes(bytes: Uint8Array): PoolParams;

  /**
   * @returns {Ed25519KeyHash}
   */
  operator(): Ed25519KeyHash;

  /**
   * @returns {VRFKeyHash}
   */
  vrf_keyhash(): VRFKeyHash;

  /**
   * @returns {BigNum}
   */
  pledge(): BigNum;

  /**
   * @returns {BigNum}
   */
  cost(): BigNum;

  /**
   * @returns {UnitInterval}
   */
  margin(): UnitInterval;

  /**
   * @returns {RewardAddress}
   */
  reward_account(): RewardAddress;

  /**
   * @returns {Ed25519KeyHashes}
   */
  pool_owners(): Ed25519KeyHashes;

  /**
   * @returns {Relays}
   */
  relays(): Relays;

  /**
   * @returns {PoolMetadata | void}
   */
  pool_metadata(): PoolMetadata | void;

  /**
   * @param {Ed25519KeyHash} operator
   * @param {VRFKeyHash} vrf_keyhash
   * @param {BigNum} pledge
   * @param {BigNum} cost
   * @param {UnitInterval} margin
   * @param {RewardAddress} reward_account
   * @param {Ed25519KeyHashes} pool_owners
   * @param {Relays} relays
   * @param {PoolMetadata | void} pool_metadata
   * @returns {PoolParams}
   */
  static new(
    operator: Ed25519KeyHash,
    vrf_keyhash: VRFKeyHash,
    pledge: BigNum,
    cost: BigNum,
    margin: UnitInterval,
    reward_account: RewardAddress,
    pool_owners: Ed25519KeyHashes,
    relays: Relays,
    pool_metadata?: PoolMetadata
  ): PoolParams;
}
/**
 */
declare export class PoolRegistration {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {PoolRegistration}
   */
  static from_bytes(bytes: Uint8Array): PoolRegistration;

  /**
   * @returns {PoolParams}
   */
  pool_params(): PoolParams;

  /**
   * @param {PoolParams} pool_params
   * @returns {PoolRegistration}
   */
  static new(pool_params: PoolParams): PoolRegistration;
}
/**
 */
declare export class PoolRetirement {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {PoolRetirement}
   */
  static from_bytes(bytes: Uint8Array): PoolRetirement;

  /**
   * @returns {Ed25519KeyHash}
   */
  pool_keyhash(): Ed25519KeyHash;

  /**
   * @returns {number}
   */
  epoch(): number;

  /**
   * @param {Ed25519KeyHash} pool_keyhash
   * @param {number} epoch
   * @returns {PoolRetirement}
   */
  static new(pool_keyhash: Ed25519KeyHash, epoch: number): PoolRetirement;
}
/**
 */
declare export class PrivateKey {
  free(): void;

  /**
   * @returns {PublicKey}
   */
  to_public(): PublicKey;

  /**
   * @returns {PrivateKey}
   */
  static generate_ed25519(): PrivateKey;

  /**
   * @returns {PrivateKey}
   */
  static generate_ed25519extended(): PrivateKey;

  /**
   * @returns {string}
   */
  to_bech32(): string;

  /**
   * @returns {Uint8Array}
   */
  as_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {PrivateKey}
   */
  static from_extended_bytes(bytes: Uint8Array): PrivateKey;

  /**
   * @param {Uint8Array} bytes
   * @returns {PrivateKey}
   */
  static from_normal_bytes(bytes: Uint8Array): PrivateKey;

  /**
   * @param {Uint8Array} message
   * @returns {Ed25519Signature}
   */
  sign(message: Uint8Array): Ed25519Signature;
}
/**
 * ED25519 key used as public key
 */
declare export class PublicKey {
  free(): void;

  /**
   * Get private key from its bech32 representation
   * Example:
   * ```javascript
   * const pkey = PublicKey.from_bech32(&#39;ed25519_pk1dgaagyh470y66p899txcl3r0jaeaxu6yd7z2dxyk55qcycdml8gszkxze2&#39;);
   * ```
   * @param {string} bech32_str
   * @returns {PublicKey}
   */
  static from_bech32(bech32_str: string): PublicKey;

  /**
   * @returns {string}
   */
  to_bech32(): string;

  /**
   * @returns {Uint8Array}
   */
  as_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {PublicKey}
   */
  static from_bytes(bytes: Uint8Array): PublicKey;

  /**
   * @param {Uint8Array} data
   * @param {Ed25519Signature} signature
   * @returns {boolean}
   */
  verify(data: Uint8Array, signature: Ed25519Signature): boolean;

  /**
   * @returns {Ed25519KeyHash}
   */
  hash(): Ed25519KeyHash;
}
/**
 */
declare export class PublicKeys {
  free(): void;

  /**
   */
  constructor(): this;

  /**
   * @returns {number}
   */
  size(): number;

  /**
   * @param {number} index
   * @returns {PublicKey}
   */
  get(index: number): PublicKey;

  /**
   * @param {PublicKey} key
   */
  add(key: PublicKey): void;
}
/**
 */
declare export class Relay {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Relay}
   */
  static from_bytes(bytes: Uint8Array): Relay;

  /**
   * @param {SingleHostAddr} single_host_addr
   * @returns {Relay}
   */
  static new_single_host_addr(single_host_addr: SingleHostAddr): Relay;

  /**
   * @param {SingleHostName} single_host_name
   * @returns {Relay}
   */
  static new_single_host_name(single_host_name: SingleHostName): Relay;

  /**
   * @param {MultiHostName} multi_host_name
   * @returns {Relay}
   */
  static new_multi_host_name(multi_host_name: MultiHostName): Relay;

  /**
   * @returns {number}
   */
  kind(): number;

  /**
   * @returns {SingleHostAddr | void}
   */
  as_single_host_addr(): SingleHostAddr | void;

  /**
   * @returns {SingleHostName | void}
   */
  as_single_host_name(): SingleHostName | void;

  /**
   * @returns {MultiHostName | void}
   */
  as_multi_host_name(): MultiHostName | void;
}
/**
 */
declare export class Relays {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Relays}
   */
  static from_bytes(bytes: Uint8Array): Relays;

  /**
   * @returns {Relays}
   */
  static new(): Relays;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {Relay}
   */
  get(index: number): Relay;

  /**
   * @param {Relay} elem
   */
  add(elem: Relay): void;
}
/**
 */
declare export class RewardAddress {
  free(): void;

  /**
   * @param {number} network
   * @param {StakeCredential} payment
   * @returns {RewardAddress}
   */
  static new(network: number, payment: StakeCredential): RewardAddress;

  /**
   * @returns {StakeCredential}
   */
  payment_cred(): StakeCredential;

  /**
   * @returns {Address}
   */
  to_address(): Address;

  /**
   * @param {Address} addr
   * @returns {RewardAddress | void}
   */
  static from_address(addr: Address): RewardAddress | void;
}
/**
 */
declare export class ScriptHash {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {ScriptHash}
   */
  static from_bytes(bytes: Uint8Array): ScriptHash;
}
/**
 */
declare export class SingleHostAddr {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {SingleHostAddr}
   */
  static from_bytes(bytes: Uint8Array): SingleHostAddr;

  /**
   * @returns {number | void}
   */
  port(): number | void;

  /**
   * @returns {Ipv4 | void}
   */
  ipv4(): Ipv4 | void;

  /**
   * @returns {Ipv6 | void}
   */
  ipv6(): Ipv6 | void;

  /**
   * @param {number | void} port
   * @param {Ipv4 | void} ipv4
   * @param {Ipv6 | void} ipv6
   * @returns {SingleHostAddr}
   */
  static new(port?: number, ipv4?: Ipv4, ipv6?: Ipv6): SingleHostAddr;
}
/**
 */
declare export class SingleHostName {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {SingleHostName}
   */
  static from_bytes(bytes: Uint8Array): SingleHostName;

  /**
   * @returns {number | void}
   */
  port(): number | void;

  /**
   * @returns {string}
   */
  dns_name(): string;

  /**
   * @param {number | void} port
   * @param {string} dns_name
   * @returns {SingleHostName}
   */
  static new(port: number | void, dns_name: string): SingleHostName;
}
/**
 */
declare export class StakeCredential {
  free(): void;

  /**
   * @param {Ed25519KeyHash} hash
   * @returns {StakeCredential}
   */
  static from_keyhash(hash: Ed25519KeyHash): StakeCredential;

  /**
   * @param {ScriptHash} hash
   * @returns {StakeCredential}
   */
  static from_scripthash(hash: ScriptHash): StakeCredential;

  /**
   * @returns {Ed25519KeyHash | void}
   */
  to_keyhash(): Ed25519KeyHash | void;

  /**
   * @returns {ScriptHash | void}
   */
  to_scripthash(): ScriptHash | void;

  /**
   * @returns {number}
   */
  kind(): number;
}
/**
 */
declare export class StakeDelegation {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {StakeDelegation}
   */
  static from_bytes(bytes: Uint8Array): StakeDelegation;

  /**
   * @returns {StakeCredential}
   */
  stake_credential(): StakeCredential;

  /**
   * @returns {Ed25519KeyHash}
   */
  pool_keyhash(): Ed25519KeyHash;

  /**
   * @param {StakeCredential} stake_credential
   * @param {Ed25519KeyHash} pool_keyhash
   * @returns {StakeDelegation}
   */
  static new(
    stake_credential: StakeCredential,
    pool_keyhash: Ed25519KeyHash
  ): StakeDelegation;
}
/**
 */
declare export class StakeDeregistration {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {StakeDeregistration}
   */
  static from_bytes(bytes: Uint8Array): StakeDeregistration;

  /**
   * @returns {StakeCredential}
   */
  stake_credential(): StakeCredential;

  /**
   * @param {StakeCredential} stake_credential
   * @returns {StakeDeregistration}
   */
  static new(stake_credential: StakeCredential): StakeDeregistration;
}
/**
 */
declare export class StakeRegistration {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {StakeRegistration}
   */
  static from_bytes(bytes: Uint8Array): StakeRegistration;

  /**
   * @returns {StakeCredential}
   */
  stake_credential(): StakeCredential;

  /**
   * @param {StakeCredential} stake_credential
   * @returns {StakeRegistration}
   */
  static new(stake_credential: StakeCredential): StakeRegistration;
}
/**
 */
declare export class Transaction {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Transaction}
   */
  static from_bytes(bytes: Uint8Array): Transaction;

  /**
   * @returns {TransactionBody}
   */
  body(): TransactionBody;

  /**
   * @returns {TransactionWitnessSet}
   */
  witness_set(): TransactionWitnessSet;

  /**
   * @returns {TransactionMetadata | void}
   */
  metadata(): TransactionMetadata | void;

  /**
   * @param {TransactionBody} body
   * @param {TransactionWitnessSet} witness_set
   * @param {TransactionMetadata | void} metadata
   * @returns {Transaction}
   */
  static new(
    body: TransactionBody,
    witness_set: TransactionWitnessSet,
    metadata?: TransactionMetadata
  ): Transaction;
}
/**
 */
declare export class TransactionBody {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {TransactionBody}
   */
  static from_bytes(bytes: Uint8Array): TransactionBody;

  /**
   * @returns {TransactionInputs}
   */
  inputs(): TransactionInputs;

  /**
   * @returns {TransactionOutputs}
   */
  outputs(): TransactionOutputs;

  /**
   * @returns {BigNum}
   */
  fee(): BigNum;

  /**
   * @returns {number}
   */
  ttl(): number;

  /**
   * @param {Certificates} certs
   */
  set_certs(certs: Certificates): void;

  /**
   * @returns {Certificates | void}
   */
  certs(): Certificates | void;

  /**
   * @param {Withdrawals} withdrawals
   */
  set_withdrawals(withdrawals: Withdrawals): void;

  /**
   * @returns {Withdrawals | void}
   */
  withdrawals(): Withdrawals | void;

  /**
   * @param {MetadataHash} metadata_hash
   */
  set_metadata_hash(metadata_hash: MetadataHash): void;

  /**
   * @returns {MetadataHash | void}
   */
  metadata_hash(): MetadataHash | void;

  /**
   * @param {TransactionInputs} inputs
   * @param {TransactionOutputs} outputs
   * @param {BigNum} fee
   * @param {number} ttl
   * @returns {TransactionBody}
   */
  static new(
    inputs: TransactionInputs,
    outputs: TransactionOutputs,
    fee: BigNum,
    ttl: number
  ): TransactionBody;
}
/**
 */
declare export class TransactionBuilder {
  free(): void;

  /**
   * @param {Ed25519KeyHash} hash
   * @param {TransactionInput} input
   * @param {BigNum} amount
   */
  add_key_input(
    hash: Ed25519KeyHash,
    input: TransactionInput,
    amount: BigNum
  ): void;

  /**
   * @param {ScriptHash} hash
   * @param {TransactionInput} input
   * @param {BigNum} amount
   */
  add_script_input(
    hash: ScriptHash,
    input: TransactionInput,
    amount: BigNum
  ): void;

  /**
   * @param {ByronAddress} hash
   * @param {TransactionInput} input
   * @param {BigNum} amount
   */
  add_bootstrap_input(
    hash: ByronAddress,
    input: TransactionInput,
    amount: BigNum
  ): void;

  /**
   * @param {TransactionOutput} output
   */
  add_output(output: TransactionOutput): void;

  /**
   * @param {BigNum} fee
   */
  set_fee(fee: BigNum): void;

  /**
   * @param {number} ttl
   */
  set_ttl(ttl: number): void;

  /**
   * @param {Certificates} certs
   */
  set_certs(certs: Certificates): void;

  /**
   * @param {Withdrawals} withdrawals
   */
  set_withdrawals(withdrawals: Withdrawals): void;

  /**
   * @param {TransactionMetadata} metadata
   */
  set_metadata(metadata: TransactionMetadata): void;

  /**
   * @param {LinearFee} linear_fee
   * @param {BigNum} minimum_utxo_val
   * @returns {TransactionBuilder}
   */
  static new(
    linear_fee: LinearFee,
    minimum_utxo_val: BigNum
  ): TransactionBuilder;

  /**
   * @returns {BigNum}
   */
  get_input_total(): BigNum;

  /**
   * @returns {BigNum}
   */
  get_feeless_output_total(): BigNum;

  /**
   * @returns {BigNum}
   */
  get_fee_or_calc(): BigNum;

  /**
   * @param {Address} address
   * @returns {boolean}
   */
  add_change_if_needed(address: Address): boolean;

  /**
   * @returns {TransactionBody}
   */
  build(): TransactionBody;

  /**
   * @returns {BigNum}
   */
  estimate_fee(): BigNum;
}
/**
 */
declare export class TransactionHash {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {TransactionHash}
   */
  static from_bytes(bytes: Uint8Array): TransactionHash;
}
/**
 */
declare export class TransactionInput {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {TransactionInput}
   */
  static from_bytes(bytes: Uint8Array): TransactionInput;

  /**
   * @returns {TransactionHash}
   */
  transaction_id(): TransactionHash;

  /**
   * @returns {number}
   */
  index(): number;

  /**
   * @param {TransactionHash} transaction_id
   * @param {number} index
   * @returns {TransactionInput}
   */
  static new(transaction_id: TransactionHash, index: number): TransactionInput;
}
/**
 */
declare export class TransactionInputs {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {TransactionInputs}
   */
  static from_bytes(bytes: Uint8Array): TransactionInputs;

  /**
   * @returns {TransactionInputs}
   */
  static new(): TransactionInputs;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {TransactionInput}
   */
  get(index: number): TransactionInput;

  /**
   * @param {TransactionInput} elem
   */
  add(elem: TransactionInput): void;
}
/**
 */
declare export class TransactionMetadata {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {TransactionMetadata}
   */
  static from_bytes(bytes: Uint8Array): TransactionMetadata;

  /**
   * @returns {TransactionMetadata}
   */
  static new(): TransactionMetadata;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {BigNum} key
   * @param {TransactionMetadatum} value
   * @returns {TransactionMetadatum | void}
   */
  insert(key: BigNum, value: TransactionMetadatum): TransactionMetadatum | void;

  /**
   * @param {BigNum} key
   * @returns {TransactionMetadatum | void}
   */
  get(key: BigNum): TransactionMetadatum | void;
}
/**
 */
declare export class TransactionMetadatum {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {TransactionMetadatum}
   */
  static from_bytes(bytes: Uint8Array): TransactionMetadatum;

  /**
   * @param {MapTransactionMetadatumToTransactionMetadatum} map_transaction_metadatum_to_transaction_metadatum
   * @returns {TransactionMetadatum}
   */
  static new_map_transaction_metadatum_to_transaction_metadatum(
    map_transaction_metadatum_to_transaction_metadatum: MapTransactionMetadatumToTransactionMetadatum
  ): TransactionMetadatum;

  /**
   * @param {TransactionMetadatums} arr_transaction_metadatum
   * @returns {TransactionMetadatum}
   */
  static new_arr_transaction_metadatum(
    arr_transaction_metadatum: TransactionMetadatums
  ): TransactionMetadatum;

  /**
   * @param {Int} int
   * @returns {TransactionMetadatum}
   */
  static new_int(int: Int): TransactionMetadatum;

  /**
   * @param {Uint8Array} bytes
   * @returns {TransactionMetadatum}
   */
  static new_bytes(bytes: Uint8Array): TransactionMetadatum;

  /**
   * @param {string} text
   * @returns {TransactionMetadatum}
   */
  static new_text(text: string): TransactionMetadatum;

  /**
   * @returns {number}
   */
  kind(): number;

  /**
   * @returns {MapTransactionMetadatumToTransactionMetadatum | void}
   */
  as_map_transaction_metadatum_to_transaction_metadatum(): MapTransactionMetadatumToTransactionMetadatum | void;

  /**
   * @returns {TransactionMetadatums | void}
   */
  as_arr_transaction_metadatum(): TransactionMetadatums | void;

  /**
   * @returns {Int | void}
   */
  as_int(): Int | void;

  /**
   * @returns {Uint8Array | void}
   */
  as_bytes(): Uint8Array | void;

  /**
   * @returns {string | void}
   */
  as_text(): string | void;
}
/**
 */
declare export class TransactionMetadatums {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {TransactionMetadatums}
   */
  static from_bytes(bytes: Uint8Array): TransactionMetadatums;

  /**
   * @returns {TransactionMetadatums}
   */
  static new(): TransactionMetadatums;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {TransactionMetadatum}
   */
  get(index: number): TransactionMetadatum;

  /**
   * @param {TransactionMetadatum} elem
   */
  add(elem: TransactionMetadatum): void;
}
/**
 */
declare export class TransactionOutput {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {TransactionOutput}
   */
  static from_bytes(bytes: Uint8Array): TransactionOutput;

  /**
   * @returns {Address}
   */
  address(): Address;

  /**
   * @returns {BigNum}
   */
  amount(): BigNum;

  /**
   * @param {Address} address
   * @param {BigNum} amount
   * @returns {TransactionOutput}
   */
  static new(address: Address, amount: BigNum): TransactionOutput;
}
/**
 */
declare export class TransactionOutputs {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {TransactionOutputs}
   */
  static from_bytes(bytes: Uint8Array): TransactionOutputs;

  /**
   * @returns {TransactionOutputs}
   */
  static new(): TransactionOutputs;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {TransactionOutput}
   */
  get(index: number): TransactionOutput;

  /**
   * @param {TransactionOutput} elem
   */
  add(elem: TransactionOutput): void;
}
/**
 */
declare export class TransactionWitnessSet {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {TransactionWitnessSet}
   */
  static from_bytes(bytes: Uint8Array): TransactionWitnessSet;

  /**
   * @param {Vkeywitnesses} vkeys
   */
  set_vkeys(vkeys: Vkeywitnesses): void;

  /**
   * @returns {Vkeywitnesses | void}
   */
  vkeys(): Vkeywitnesses | void;

  /**
   * @param {MultisigScripts} scripts
   */
  set_scripts(scripts: MultisigScripts): void;

  /**
   * @returns {MultisigScripts | void}
   */
  scripts(): MultisigScripts | void;

  /**
   * @param {BootstrapWitnesses} bootstraps
   */
  set_bootstraps(bootstraps: BootstrapWitnesses): void;

  /**
   * @returns {BootstrapWitnesses | void}
   */
  bootstraps(): BootstrapWitnesses | void;

  /**
   * @returns {TransactionWitnessSet}
   */
  static new(): TransactionWitnessSet;
}
/**
 */
declare export class UnitInterval {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {UnitInterval}
   */
  static from_bytes(bytes: Uint8Array): UnitInterval;

  /**
   * @returns {BigNum}
   */
  numerator(): BigNum;

  /**
   * @returns {BigNum}
   */
  denominator(): BigNum;

  /**
   * @param {BigNum} numerator
   * @param {BigNum} denominator
   * @returns {UnitInterval}
   */
  static new(numerator: BigNum, denominator: BigNum): UnitInterval;
}
/**
 */
declare export class VRFKeyHash {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {VRFKeyHash}
   */
  static from_bytes(bytes: Uint8Array): VRFKeyHash;
}
/**
 */
declare export class Vkey {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Vkey}
   */
  static from_bytes(bytes: Uint8Array): Vkey;

  /**
   * @param {PublicKey} pk
   * @returns {Vkey}
   */
  static new(pk: PublicKey): Vkey;

  /**
   * @returns {PublicKey}
   */
  public_key(): PublicKey;
}
/**
 */
declare export class Vkeywitness {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Vkeywitness}
   */
  static from_bytes(bytes: Uint8Array): Vkeywitness;

  /**
   * @param {Vkey} vkey
   * @param {Ed25519Signature} signature
   * @returns {Vkeywitness}
   */
  static new(vkey: Vkey, signature: Ed25519Signature): Vkeywitness;

  /**
   * @returns {Vkey}
   */
  vkey(): Vkey;

  /**
   * @returns {Ed25519Signature}
   */
  signature(): Ed25519Signature;
}
/**
 */
declare export class Vkeywitnesses {
  free(): void;

  /**
   * @returns {Vkeywitnesses}
   */
  static new(): Vkeywitnesses;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {Vkeywitness}
   */
  get(index: number): Vkeywitness;

  /**
   * @param {Vkeywitness} elem
   */
  add(elem: Vkeywitness): void;
}
/**
 */
declare export class Withdrawals {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Withdrawals}
   */
  static from_bytes(bytes: Uint8Array): Withdrawals;

  /**
   * @returns {Withdrawals}
   */
  static new(): Withdrawals;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {RewardAddress} key
   * @param {BigNum} value
   * @returns {BigNum | void}
   */
  insert(key: RewardAddress, value: BigNum): BigNum | void;

  /**
   * @param {RewardAddress} key
   * @returns {BigNum | void}
   */
  get(key: RewardAddress): BigNum | void;
}
