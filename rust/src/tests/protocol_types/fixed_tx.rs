use crate::*;
use hex;
use crate::fakes::fake_bootstrap_witness;
use crate::tests::fakes::fake_vkey_witness;

#[test]
fn simple_round_trip() {
    let original_tx = FixedTransaction::from_hex("84a700818258208b9c96823c19f2047f32210a330434b3d163e194ea17b2b702c0667f6fea7a7a000d80018182581d6138fe1dd1d91221a199ff0dacf41fdd5b87506b533d00e70fae8dae8f1abfbac06a021a0002b645031a03962de305a1581de1b3cabd3914ef99169ace1e8b545b635f809caa35f8b6c8bc69ae48061abf4009040e80a100828258207dc05ac55cdfb9cc24571d491d3a3bdbd7d48489a916d27fce3ffe5c9af1b7f55840d7eda8457f1814fe3333b7b1916e3b034e6d480f97f4f286b1443ef72383279718a3a3fddf127dae0505b01a48fd9ffe0f52d9d8c46d02bcb85d1d106c13aa048258201b3d6e1236891a921abf1a3f90a9fb1b2568b1096b6cd6d3eaaeb0ef0ee0802f58401ce4658303c3eb0f2b9705992ccd62de30423ade90219e2c4cfc9eb488c892ea28ba3110f0c062298447f4f6365499d97d31207075f9815c3fe530bd9a927402f5f6").unwrap();
    let body = hex::decode("a700818258208b9c96823c19f2047f32210a330434b3d163e194ea17b2b702c0667f6fea7a7a000d80018182581d6138fe1dd1d91221a199ff0dacf41fdd5b87506b533d00e70fae8dae8f1abfbac06a021a0002b645031a03962de305a1581de1b3cabd3914ef99169ace1e8b545b635f809caa35f8b6c8bc69ae48061abf4009040e80").unwrap();
    let wit_set = hex::decode("a100828258207dc05ac55cdfb9cc24571d491d3a3bdbd7d48489a916d27fce3ffe5c9af1b7f55840d7eda8457f1814fe3333b7b1916e3b034e6d480f97f4f286b1443ef72383279718a3a3fddf127dae0505b01a48fd9ffe0f52d9d8c46d02bcb85d1d106c13aa048258201b3d6e1236891a921abf1a3f90a9fb1b2568b1096b6cd6d3eaaeb0ef0ee0802f58401ce4658303c3eb0f2b9705992ccd62de30423ade90219e2c4cfc9eb488c892ea28ba3110f0c062298447f4f6365499d97d31207075f9815c3fe530bd9a927402").unwrap();
    let tx = FixedTransaction::new(&body, &wit_set, true).unwrap();
    let tx2 = FixedTransaction::from_bytes(tx.to_bytes()).unwrap();

    let wit_set_decoded = TransactionWitnessSet::from_bytes(wit_set).unwrap();
    let wit_set_decoded_2 = TransactionWitnessSet::from_bytes(tx2.raw_witness_set()).unwrap();

    assert_eq!(body, tx2.raw_body());
    assert_eq!(wit_set_decoded, wit_set_decoded_2);
    assert_eq!(tx.raw_body(), tx2.raw_body());
    assert_eq!(tx.raw_witness_set(), tx2.raw_witness_set());
    assert_eq!(tx.is_valid(), tx2.is_valid());
    assert_eq!(tx.to_bytes(), tx2.to_bytes());
    assert_eq!(tx.raw_body(), original_tx.raw_body());
    assert_eq!(tx.raw_witness_set(), original_tx.raw_witness_set());
    assert_eq!(tx.is_valid(), original_tx.is_valid());
    assert_eq!(tx.to_bytes(), original_tx.to_bytes());
}

#[test]
fn round_trip_via_tx() {
    let casual_tx = Transaction::from_hex("84a700818258208b9c96823c19f2047f32210a330434b3d163e194ea17b2b702c0667f6fea7a7a000d80018182581d6138fe1dd1d91221a199ff0dacf41fdd5b87506b533d00e70fae8dae8f1abfbac06a021a0002b645031a03962de305a1581de1b3cabd3914ef99169ace1e8b545b635f809caa35f8b6c8bc69ae48061abf4009040e80a100828258207dc05ac55cdfb9cc24571d491d3a3bdbd7d48489a916d27fce3ffe5c9af1b7f55840d7eda8457f1814fe3333b7b1916e3b034e6d480f97f4f286b1443ef72383279718a3a3fddf127dae0505b01a48fd9ffe0f52d9d8c46d02bcb85d1d106c13aa048258201b3d6e1236891a921abf1a3f90a9fb1b2568b1096b6cd6d3eaaeb0ef0ee0802f58401ce4658303c3eb0f2b9705992ccd62de30423ade90219e2c4cfc9eb488c892ea28ba3110f0c062298447f4f6365499d97d31207075f9815c3fe530bd9a927402f5f6").unwrap();
    let body = hex::decode("a700818258208b9c96823c19f2047f32210a330434b3d163e194ea17b2b702c0667f6fea7a7a000d80018182581d6138fe1dd1d91221a199ff0dacf41fdd5b87506b533d00e70fae8dae8f1abfbac06a021a0002b645031a03962de305a1581de1b3cabd3914ef99169ace1e8b545b635f809caa35f8b6c8bc69ae48061abf4009040e80").unwrap();
    let wit_set = hex::decode("a100828258207dc05ac55cdfb9cc24571d491d3a3bdbd7d48489a916d27fce3ffe5c9af1b7f55840d7eda8457f1814fe3333b7b1916e3b034e6d480f97f4f286b1443ef72383279718a3a3fddf127dae0505b01a48fd9ffe0f52d9d8c46d02bcb85d1d106c13aa048258201b3d6e1236891a921abf1a3f90a9fb1b2568b1096b6cd6d3eaaeb0ef0ee0802f58401ce4658303c3eb0f2b9705992ccd62de30423ade90219e2c4cfc9eb488c892ea28ba3110f0c062298447f4f6365499d97d31207075f9815c3fe530bd9a927402").unwrap();
    let tx = FixedTransaction::new(&body, &wit_set, true).unwrap();
    let tx2 = Transaction::from_bytes(tx.to_bytes()).unwrap();

    assert_eq!(casual_tx.body(), tx.body());
    assert_eq!(casual_tx.witness_set(), tx.witness_set());
    assert_eq!(casual_tx.is_valid(), tx.is_valid());
    assert_eq!(casual_tx, tx2);
}

#[test]
fn round_trip_nonstandart_body() {
    let original_tx = FixedTransaction::from_hex("84a7009F8258208b9c96823c19f2047f32210a330434b3d163e194ea17b2b702c0667f6fea7a7a00FF0d80018182581d6138fe1dd1d91221a199ff0dacf41fdd5b87506b533d00e70fae8dae8f1abfbac06a021a0002b645031a03962de305a1581de1b3cabd3914ef99169ace1e8b545b635f809caa35f8b6c8bc69ae48061abf4009040e80a100828258207dc05ac55cdfb9cc24571d491d3a3bdbd7d48489a916d27fce3ffe5c9af1b7f55840d7eda8457f1814fe3333b7b1916e3b034e6d480f97f4f286b1443ef72383279718a3a3fddf127dae0505b01a48fd9ffe0f52d9d8c46d02bcb85d1d106c13aa048258201b3d6e1236891a921abf1a3f90a9fb1b2568b1096b6cd6d3eaaeb0ef0ee0802f58401ce4658303c3eb0f2b9705992ccd62de30423ade90219e2c4cfc9eb488c892ea28ba3110f0c062298447f4f6365499d97d31207075f9815c3fe530bd9a927402f5f6").unwrap();
    let casual_tx = Transaction::from_hex("84a7009F8258208b9c96823c19f2047f32210a330434b3d163e194ea17b2b702c0667f6fea7a7a00FF0d80018182581d6138fe1dd1d91221a199ff0dacf41fdd5b87506b533d00e70fae8dae8f1abfbac06a021a0002b645031a03962de305a1581de1b3cabd3914ef99169ace1e8b545b635f809caa35f8b6c8bc69ae48061abf4009040e80a100828258207dc05ac55cdfb9cc24571d491d3a3bdbd7d48489a916d27fce3ffe5c9af1b7f55840d7eda8457f1814fe3333b7b1916e3b034e6d480f97f4f286b1443ef72383279718a3a3fddf127dae0505b01a48fd9ffe0f52d9d8c46d02bcb85d1d106c13aa048258201b3d6e1236891a921abf1a3f90a9fb1b2568b1096b6cd6d3eaaeb0ef0ee0802f58401ce4658303c3eb0f2b9705992ccd62de30423ade90219e2c4cfc9eb488c892ea28ba3110f0c062298447f4f6365499d97d31207075f9815c3fe530bd9a927402f5f6").unwrap();
    let body = hex::decode("a7009F8258208b9c96823c19f2047f32210a330434b3d163e194ea17b2b702c0667f6fea7a7a00FF0d80018182581d6138fe1dd1d91221a199ff0dacf41fdd5b87506b533d00e70fae8dae8f1abfbac06a021a0002b645031a03962de305a1581de1b3cabd3914ef99169ace1e8b545b635f809caa35f8b6c8bc69ae48061abf4009040e80").unwrap();
    let wit_set = hex::decode("a100828258207dc05ac55cdfb9cc24571d491d3a3bdbd7d48489a916d27fce3ffe5c9af1b7f55840d7eda8457f1814fe3333b7b1916e3b034e6d480f97f4f286b1443ef72383279718a3a3fddf127dae0505b01a48fd9ffe0f52d9d8c46d02bcb85d1d106c13aa048258201b3d6e1236891a921abf1a3f90a9fb1b2568b1096b6cd6d3eaaeb0ef0ee0802f58401ce4658303c3eb0f2b9705992ccd62de30423ade90219e2c4cfc9eb488c892ea28ba3110f0c062298447f4f6365499d97d31207075f9815c3fe530bd9a927402").unwrap();
    let tx = FixedTransaction::new(&body, &wit_set, true).unwrap();
    let tx2 = Transaction::from_bytes(tx.to_bytes()).unwrap();
    let tx3 = FixedTransaction::from_bytes(tx.to_bytes()).unwrap();

    let wit_set_decoded = TransactionWitnessSet::from_bytes(wit_set).unwrap();
    let wit_set_decoded_2 = TransactionWitnessSet::from_bytes(tx3.raw_witness_set()).unwrap();

    assert_eq!(casual_tx.body(), tx.body());
    assert_eq!(casual_tx.witness_set(), tx.witness_set());
    assert_eq!(casual_tx.is_valid(), tx.is_valid());

    assert_eq!(body, tx3.raw_body());
    assert_eq!(wit_set_decoded, wit_set_decoded_2);
    assert_eq!(tx.raw_body(), tx3.raw_body());
    assert_eq!(tx.raw_witness_set(), tx3.raw_witness_set());
    assert_eq!(tx.is_valid(), tx3.is_valid());
    assert_eq!(tx.to_bytes(), tx3.to_bytes());
    assert_eq!(tx.raw_body(), original_tx.raw_body());
    assert_eq!(tx.raw_witness_set(), original_tx.raw_witness_set());
    assert_eq!(tx.is_valid(), original_tx.is_valid());
    assert_eq!(tx.to_bytes(), original_tx.to_bytes());

    assert_eq!(casual_tx, tx2);

    assert_ne!(tx2.to_bytes(), original_tx.to_bytes());
}

#[test]
fn fixed_tx_add_signature() {
    let mut tx = FixedTransaction::from_hex("84a7009F8258208b9c96823c19f2047f32210a330434b3d163e194ea17b2b702c0667f6fea7a7a00FF0d80018182581d6138fe1dd1d91221a199ff0dacf41fdd5b87506b533d00e70fae8dae8f1abfbac06a021a0002b645031a03962de305a1581de1b3cabd3914ef99169ace1e8b545b635f809caa35f8b6c8bc69ae48061abf4009040e80a100828258207dc05ac55cdfb9cc24571d491d3a3bdbd7d48489a916d27fce3ffe5c9af1b7f55840d7eda8457f1814fe3333b7b1916e3b034e6d480f97f4f286b1443ef72383279718a3a3fddf127dae0505b01a48fd9ffe0f52d9d8c46d02bcb85d1d106c13aa048258201b3d6e1236891a921abf1a3f90a9fb1b2568b1096b6cd6d3eaaeb0ef0ee0802f58401ce4658303c3eb0f2b9705992ccd62de30423ade90219e2c4cfc9eb488c892ea28ba3110f0c062298447f4f6365499d97d31207075f9815c3fe530bd9a927402f5f6").unwrap();
    let private_key_1 = Bip32PrivateKey::generate_ed25519_bip32().unwrap().to_raw_key();
    let private_key_2 = Bip32PrivateKey::generate_ed25519_bip32().unwrap().to_raw_key();

    assert_eq!(tx.witness_set().vkeys().unwrap().len(), 2);

    let vkey_witness_1 = make_vkey_witness(&tx.transaction_hash(), &private_key_1);
    let vkey_witness_2 = make_vkey_witness(&tx.transaction_hash(), &private_key_2);
    tx.add_vkey_witness(&vkey_witness_1);
    tx.sign_and_add_vkey_signature(&private_key_2).unwrap();

    let tx2 = FixedTransaction::from_bytes(tx.to_bytes()).unwrap();
    assert_eq!(&tx.body(), &tx2.body());
    assert_eq!(&tx.witness_set(), &tx2.witness_set());

    let vkey_witnesses = tx2.witness_set().vkeys().unwrap();
    assert_eq!(vkey_witnesses.len(), 4);
    assert!(vkey_witnesses.contains(&vkey_witness_1));
    assert!(vkey_witnesses.contains(&vkey_witness_2));
}


#[test]
fn fixed_tx_add_daedalus_boostrap_signature() {
    let mut tx = FixedTransaction::from_hex("84a7009F8258208b9c96823c19f2047f32210a330434b3d163e194ea17b2b702c0667f6fea7a7a00FF0d80018182581d6138fe1dd1d91221a199ff0dacf41fdd5b87506b533d00e70fae8dae8f1abfbac06a021a0002b645031a03962de305a1581de1b3cabd3914ef99169ace1e8b545b635f809caa35f8b6c8bc69ae48061abf4009040e80a100828258207dc05ac55cdfb9cc24571d491d3a3bdbd7d48489a916d27fce3ffe5c9af1b7f55840d7eda8457f1814fe3333b7b1916e3b034e6d480f97f4f286b1443ef72383279718a3a3fddf127dae0505b01a48fd9ffe0f52d9d8c46d02bcb85d1d106c13aa048258201b3d6e1236891a921abf1a3f90a9fb1b2568b1096b6cd6d3eaaeb0ef0ee0802f58401ce4658303c3eb0f2b9705992ccd62de30423ade90219e2c4cfc9eb488c892ea28ba3110f0c062298447f4f6365499d97d31207075f9815c3fe530bd9a927402f5f6").unwrap();
    let private_key_1 = Bip32PrivateKey::generate_ed25519_bip32().unwrap();
    let private_key_2 = Bip32PrivateKey::generate_ed25519_bip32().unwrap();
    let legacy_private_key_1 = LegacyDaedalusPrivateKey::from_bytes(&private_key_1.as_bytes()).unwrap();
    let legacy_private_key_2 = LegacyDaedalusPrivateKey::from_bytes(&private_key_2.as_bytes()).unwrap();
    let addr = ByronAddress::from_base58("Ae2tdPwUPEZ6r6zbg4ibhFrNnyKHg7SYuPSfDpjKxgvwFX9LquRep7gj7FQ").unwrap();

    assert_eq!(tx.witness_set().bootstraps().unwrap_or_else(|| BootstrapWitnesses::new()).len(), 0);

    let boostrap_witness_1 = make_daedalus_bootstrap_witness(&tx.transaction_hash(), &addr, &legacy_private_key_1);
    let boostrap_witness_2 = make_daedalus_bootstrap_witness(&tx.transaction_hash(), &addr, &legacy_private_key_2);
    tx.add_bootstrap_witness(&boostrap_witness_1);
    tx.sign_and_add_daedalus_bootstrap_signature(&addr, &legacy_private_key_2).unwrap();

    let tx2 = FixedTransaction::from_bytes(tx.to_bytes()).unwrap();
    assert_eq!(&tx.body(), &tx2.body());
    assert_eq!(&tx.witness_set(), &tx2.witness_set());

    let boostraps = tx2.witness_set().bootstraps().unwrap();
    assert_eq!(boostraps.len(), 2);
    assert!(boostraps.contains(&boostrap_witness_1));
    assert!(boostraps.contains(&boostrap_witness_2));
}


#[test]
fn fixed_tx_add_icarus_boostrap_signature() {
    let mut tx = FixedTransaction::from_hex("84a7009F8258208b9c96823c19f2047f32210a330434b3d163e194ea17b2b702c0667f6fea7a7a00FF0d80018182581d6138fe1dd1d91221a199ff0dacf41fdd5b87506b533d00e70fae8dae8f1abfbac06a021a0002b645031a03962de305a1581de1b3cabd3914ef99169ace1e8b545b635f809caa35f8b6c8bc69ae48061abf4009040e80a100828258207dc05ac55cdfb9cc24571d491d3a3bdbd7d48489a916d27fce3ffe5c9af1b7f55840d7eda8457f1814fe3333b7b1916e3b034e6d480f97f4f286b1443ef72383279718a3a3fddf127dae0505b01a48fd9ffe0f52d9d8c46d02bcb85d1d106c13aa048258201b3d6e1236891a921abf1a3f90a9fb1b2568b1096b6cd6d3eaaeb0ef0ee0802f58401ce4658303c3eb0f2b9705992ccd62de30423ade90219e2c4cfc9eb488c892ea28ba3110f0c062298447f4f6365499d97d31207075f9815c3fe530bd9a927402f5f6").unwrap();
    let private_key_1 = Bip32PrivateKey::generate_ed25519_bip32().unwrap();
    let private_key_2 = Bip32PrivateKey::generate_ed25519_bip32().unwrap();
    let addr = ByronAddress::from_base58("Ae2tdPwUPEZ6r6zbg4ibhFrNnyKHg7SYuPSfDpjKxgvwFX9LquRep7gj7FQ").unwrap();

    assert_eq!(tx.witness_set().bootstraps().unwrap_or_else(|| BootstrapWitnesses::new()).len(), 0);

    let boostrap_witness_1 = make_icarus_bootstrap_witness(&tx.transaction_hash(), &addr, &private_key_1);
    let boostrap_witness_2 = make_icarus_bootstrap_witness(&tx.transaction_hash(), &addr, &private_key_2);
    tx.add_bootstrap_witness(&boostrap_witness_1);
    tx.sign_and_add_icarus_bootstrap_signature(&addr, &private_key_2).unwrap();

    let tx2 = FixedTransaction::from_bytes(tx.to_bytes()).unwrap();
    assert_eq!(&tx.body(), &tx2.body());
    assert_eq!(&tx.witness_set(), &tx2.witness_set());

    let boostraps = tx2.witness_set().bootstraps().unwrap();
    assert_eq!(boostraps.len(), 2);
    assert!(boostraps.contains(&boostrap_witness_1));
    assert!(boostraps.contains(&boostrap_witness_2));
}

#[test]
fn fixed_transaction_with_plutus_witnesses() {
    let hex = "";
    let tx = Transaction::from_hex(hex).unwrap();
    let mut fixed_tx = FixedTransaction::from_hex(hex).unwrap();
    assert_eq!(tx.body(), fixed_tx.body());
    assert_eq!(tx.witness_set(), fixed_tx.witness_set());
    assert_eq!(tx.is_valid(), fixed_tx.is_valid());
    assert_eq!(tx.auxiliary_data(), fixed_tx.auxiliary_data());

    assert_eq!(fixed_tx.witness_set().vkeys().unwrap().len(), 1);

    let private_key_1 = Bip32PrivateKey::generate_ed25519_bip32().unwrap().to_raw_key();
    let vkey_witness_1 = make_vkey_witness(&fixed_tx.transaction_hash(), &private_key_1);
    fixed_tx.sign_and_add_vkey_signature(&private_key_1).unwrap();

    assert_eq!(fixed_tx.witness_set().vkeys().unwrap().len(), 2);

    let fixed_tx_roundtrip = FixedTransaction::from_bytes(fixed_tx.to_bytes()).unwrap();
    assert_eq!(fixed_tx_roundtrip.body(), fixed_tx.body());
    assert_eq!(fixed_tx_roundtrip.witness_set(), fixed_tx.witness_set());

    assert!(fixed_tx_roundtrip.witness_set().vkeys().unwrap().contains(&vkey_witness_1));
    assert_eq!(fixed_tx.transaction_hash(), fixed_tx_roundtrip.transaction_hash());
}

#[test]
fn add_witnesses_to_tagged_tx() {
    let hex = "84a400d90102818258203b40265111d8bb3c3c608d95b3a0bf83461ace32d79336579a1939b3aad1c0b700018182581d611c616f1acb460668a9b2f123c80372c2adad3583b9c6cd2b1deeed1c01021a00016f32030aa0f5f6";
    let vkey_witness = fake_vkey_witness(1);
    let byron_address = ByronAddress::from_base58("Ae2tdPwUPEZ5uzkzh1o2DHECiUi3iugvnnKHRisPgRRP3CTF4KCMvy54Xd3")
        .unwrap();
    let bootstrap_witness = fake_bootstrap_witness(1, &byron_address);
    let mut fixed_tx = FixedTransaction::from_hex(hex).unwrap();
    fixed_tx.add_bootstrap_witness(&bootstrap_witness);
    fixed_tx.add_vkey_witness(&vkey_witness);

    let new_bytes = fixed_tx.to_bytes();

    let tx_sets = has_transaction_set_tag(hex::decode(hex).unwrap()).unwrap();
    assert_eq!(tx_sets, TransactionSetsState::AllSetsHaveTag);

    let new_tx_sets = has_transaction_set_tag(new_bytes.clone()).unwrap();
    assert_eq!(new_tx_sets, TransactionSetsState::AllSetsHaveTag);

    let new_tx = FixedTransaction::from_bytes(new_bytes).unwrap();

    let wit_set_tag = has_transaction_witnesses_set_tag(&new_tx.witness_set());
    assert_eq!(wit_set_tag, Some(TransactionSetsState::AllSetsHaveTag));
}

#[test]
fn add_witnesses_to_untagged_tx() {
    let hex = "84a400818258203b40265111d8bb3c3c608d95b3a0bf83461ace32d79336579a1939b3aad1c0b700018182581d611c616f1acb460668a9b2f123c80372c2adad3583b9c6cd2b1deeed1c01021a00016f32030aa0f5f6";
    let vkey_witness = fake_vkey_witness(1);
    let byron_address = ByronAddress::from_base58("Ae2tdPwUPEZ5uzkzh1o2DHECiUi3iugvnnKHRisPgRRP3CTF4KCMvy54Xd3")
        .unwrap();
    let bootstrap_witness = fake_bootstrap_witness(1, &byron_address);
    let mut fixed_tx = FixedTransaction::from_hex(hex).unwrap();
    fixed_tx.add_bootstrap_witness(&bootstrap_witness);
    fixed_tx.add_vkey_witness(&vkey_witness);

    let new_bytes = fixed_tx.to_bytes();

    let tx_sets = has_transaction_set_tag(hex::decode(hex).unwrap()).unwrap();
    assert_eq!(tx_sets, TransactionSetsState::AllSetsHaveNoTag);

    let new_tx_sets = has_transaction_set_tag(new_bytes.clone()).unwrap();
    assert_eq!(new_tx_sets, TransactionSetsState::AllSetsHaveNoTag);

    let new_tx = FixedTransaction::from_bytes(new_bytes).unwrap();

    let wit_set_tag = has_transaction_witnesses_set_tag(&new_tx.witness_set());
    assert_eq!(wit_set_tag, Some(TransactionSetsState::AllSetsHaveNoTag));
}